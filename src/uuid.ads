pragma Ada_2012;
private with Interfaces.C;

package UUID is

----------------------------------------------------------------------------------------------
--  Description
--   The UUID library is used to generate unique identifiers for objects that
--     may be accessible beyond the local system.
--   This library generates UUIDs compatible with those created by the
--   Open Software Foundation (OSF) Distributed Computing Environment (DCE) utility uuidgen.
--   The UUIDs generated by this library can be reasonably expected to
--    be unique within a system, and unique across all systems.
--   They could be used, for instance, to generate unique HTTP cookies across multiple web servers
--    without communication between the servers, and without fear of a name clash.
--
--  Conforming to:
--    OSF DCE 1.1
----------------------------------------------------------------------------------------------


   type VARIANT_Type is (NCS, DCE, MICROSOFT, OTHER);

   type TYPE_DCE is (TIME, RANDOM);

   type Uuid_Type is tagged private;
   --  The UUID is 16 bytes (128 bits) long, which gives approximately 3.4x10^38 unique values
   --  (there are approximately 10^80 elementary particles in the universe according to Carl Sagan's Cosmos).
   --  The new UUID can reasonably be considered unique among all UUIDs created on the local system,
   --  and among UUIDs created on other systems in the past and in the future.
   --  -------------------------------------------------------------------------------------------------------

   NULL_UUID : constant Uuid_Type;
   --  An UUID with the zero-value 00000000-0000-0000-0000-000000000000
   --  -------------------------------------------------------------------------------------------------------

   procedure Clear (Uu : out Uuid_Type);
   --  The clear function sets the value of the supplied uuid variable uu to the NULL value.
   --  -------------------------------------------------------------------------------------------------------

   function "="
     (L : Uuid_Type;
      R : Uuid_Type) return Boolean;
   function ">"
     (L : Uuid_Type;
      R : Uuid_Type) return Boolean;


   procedure Generate (Uu : out Uuid_Type);
   function Generate return Uuid_Type;
   --  The generate function creates a new universally unique identifier (UUID).
   --   The uuid will be generated based on high-quality randomness from /dev/urandom, if available.
   --   If it is not available, then uuid_generate will use an alternative algorithm
   --   which uses the current time, the local ethernet MAC address (if available),
   --   and random data generated using a pseudo-random generator.
   --  -------------------------------------------------------------------------------------------------------

   procedure Generate_Random (Uu : out Uuid_Type);
   function Generate_Random return Uuid_Type;
   --  The generate_random function forces the use of the all-random UUID format,
   --   even if a high-quality random number generator (i.e., /dev/urandom) is not available,
   --   in which case a pseudo-random generator will be substituted.
   --   Note that the use of a pseudo-random generator may compromise the uniqueness of UUIDs generated in this fashion.
--  -------------------------------------------------------------------------------------------------------


   procedure Generate_Time (Uu : out Uuid_Type);
   function Generate_Time return Uuid_Type;
   --  The generate_time function forces the use of the alternative algorithm which uses
   --   the current time and the local ethernet MAC address (if available).
   --   This algorithm used to be the default one used to generate UUID,
   --   but because of the use of the ethernet MAC address,
   --   it can leak information about when and where the UUID was generated.
   --   This can cause privacy problems in some applications,
   --   so the uuid_generate function only uses this algorithm if a high-quality source of randomness is not available.
   --  To guarantee uniqueness of UUIDs generated by concurrently running processes,
   --   the uuid library uses global clock state counter
   --    (if the process has permissions to gain exclusive access to this file) and/or the uuidd daemon,
   --   if it is running already or can be be spawned by the process
   --    (if installed and the process has enough permissions to run it).
   --  If neither of these two synchronization mechanisms can be used,
   --   it is theoretically possible that two concurrently running processes obtain the same UUID(s).
   --  To tell whether the UUID has been generated in a safe manner, use uuid_generate_time_safe.
   --------------------------------------------------------------------------------------------------

   function Generate_Time_Safe (Uu : out Uuid_Type) return Boolean;
   --  The generate_time_safe is similar to generate_time,
   --   except that it returns a value which denotes whether any of the synchronization mechanisms (see above) has been used.
   --------------------------------------------------------------------------------------------------


   function Is_Null (Uu : out Uuid_Type) return Boolean;

   function Parse (S : String) return Uuid_Type;
   function Parse (Uu : out Uuid_Type; S : String) return Boolean;
   procedure Parse (Uu : out Uuid_Type; S : String);
   --  The parse function converts the UUID string given by in into the binary representation.
   --  The input UUID is a string of the form 1b4e28ba-2fa1-11d2-883f-b9a761bde3fb
   --  (in printf(3) format "%08x-%04x-%04x-%04x-%012x", 36 characters').
   --------------------------------------------------------------------------------------------------

   function Value (S : String) return Uuid_Type renames Parse;

   type Image_Type is (Default, Upper_Case, Lower_Case);


   function Image (Uu : Uuid_Type; Mode : Image_Type := Default) return String;
   --  The Image function converts the supplied UUID uu from the binary representation into a 36-byte string
   --  of the form 1b4e28ba-2fa1-11d2-883f-0016d3cca427.
   --  The case of the hex digits returned by Image may be upper or lower case,
   --  and is dependent on the system-dependent local default.
   --  If the case of the hex digits is important then the Image_Type shall be set acordingly.
   --  -------------------------------------------------------------------------------------------------------

   function Gettype (Uu : Uuid_Type) return TYPE_DCE;


   function Variant (Uu : Uuid_Type) return VARIANT_Type;

private

   use Interfaces.C;

   type Uuid_T is array (0 .. 15) of aliased Unsigned_Char with Default_Component_Value => 0;  -- /usr/include/uuid/uuid.h:44
   type Uuid_Type is  tagged record
      Data : aliased Uuid_T;
   end record;

   NULL_UUID : constant Uuid_Type := (others => <>);

   pragma Linker_Options ("-luuid");
end UUID;
